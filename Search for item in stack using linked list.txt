#include <iostream>

using namespace std;

class node {
public:
    int data;
    node* next;
};

class stack {
public:
    bool isEmpty();
    void push(int value);
    double pop();
    void display();
    int peek();
    double deleteNode(double value);

private:
    node* top = NULL;
};

int main() {
    stack s;
    s.push(5);
    s.push(10);
    s.push(15);
    s.push(20);
    s.display();
    cout << s.pop() << " was deleted from the stack." << endl;
    s.display();
    cout << "The peek of the stack is: " << s.peek() << endl;
    cout << s.deleteNode(10);
    s.display();
}

bool stack::isEmpty() {
    if (top == NULL)
        return true;
    else
        return false;
}

void stack::push(int value) {
    node* new_node;
    new_node = new node;
    new_node->data = value;
    new_node->next = top;
    top = new_node;
}

void stack::display() {
    if (isEmpty()) {
        cout << "Stack underflow.";
    } else {
        node* current_node = top;
        while (current_node != NULL) {
            cout << current_node->data << endl;
            current_node = current_node->next;
        }
    }
}

double stack::pop() {
    if (isEmpty()) {
        cout << "Stack underflow.";
        return -1;
    } else {
        double value;
        node* current;
        current = top;
        value = current->data;
        top = current->next;
        delete(current);
        return value;
    }
}

int stack::peek() {
    if (isEmpty()) {
        cout << "Stack underflow.";
        return -1;
    } else {
        return top->data;
    }
}

double stack::deleteNode(double value) {
    double last;
    node* current, *previous;

    current = top;
    previous = top;

    if (current->data == value) {
        pop();
    } else {
        while (current->data != value) {
            previous = current;
            current = current->next;
        }
        last = current->data;
        previous->next = current->next;
        free(current);
        return last;
    }
}
