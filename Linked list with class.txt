#include <iostream>
using namespace std;

class node
{
  public:
	int data;
	node* next;
};


class list{
public:
   list(){
   head=NULL;
   }

void insertNode(int value);
void display();
void deleteNode(int value);

private:
    node* head;
};
int main()
{
    list l;
	l.insertNode(5);
	l.insertNode(10);
	l.insertNode(15);
	l.display();
	l.insertNode(7);
	l.deleteNode(15);
	l.display();

}


void list::insertNode(int value) {
	node *new_node , *last;
	new_node = new node;
 	new_node->data = value;

	if (head == NULL) {
		head = new_node;
		new_node->next = NULL;
	}
	else {
		last = head;
		while (last->next != NULL) {
			last = last->next;
		}
		last->next = new_node;
		new_node->next = NULL;
	}

}

void list::display() {
	node* current_node;
	if (head == NULL) {
		cout << "Linked list is empty";
	}
	else {
		current_node = head;
		while (current_node != NULL) {
			cout << "\n" << current_node->data << "\t";
			current_node = current_node->next;
		}
	}
}


void list::deleteNode(int value) {
	node *current, *previous;
	current = head;
	previous = head;

	if (current->data == value) {
		head = current->next;
		free(current);
	}

	while (current->data != value) {
		previous = current;
		current = current->next;
	}
	previous->next = current->next;
	free(current);

}
